<nav class="navbar navbar-default navbar-fixed-top">
	<div class="container">
		<div class="navbar-header">
			<a href="#"  class="navbar-brand">
				Info-BCoin
			</a>
		</div>
		<div id="navbar" class="collapse navbar-collapse">
			<ul class="nav navbar-nav">
				<li>
					<a href="#">Home</a>
				</li>
				<li>
					<a href="#">About</a>
				</li>
			</ul>
		</div>

	</div>	
</nav>
<!-- Content -->

<div class="container" style="margin: 5%" role="main">
	<div class="panel panel-default">	 	
		<div class="panel-body">
			<h2 class="page-header" style="margin:0px 0 20px; font-style: italic;">Welcome to Info-BCoin</h2>

			<table class="table" style="width: 60%; margin-left: auto; margin-right: auto;">				
				<thead>
					<tr>
						<th>Current Price</th>
						<th>Historic price </th>
					</tr>
				</thead>
				<tbody>
					<tr>
						<td rowspan="5" align="center">
							<h3>
								<span style="color: green;" id="current_price"></span>
							</h3>
							
						</td>
						<td>something</td>
					</tr>
				</tbody>
			</table>
			
			
		</div>
  		<div class="panel-footer">
  			<h4>Rolling Average: <span id="rolling_average"></span> </h4>	
  		</div>
	</div>
				
	
	
</div>





<script type="text/javascript">
	//store the BPI Object
	var bpiList = [];
	var currentPriceEl = document.getElementById("current_price");
	var rollingAverageEl = document.getElementById("rolling_average");
	

	//Stream Observable, get from the url(API coindesk)
	var requestStream = Rx.Observable.just("http://api.coindesk.com/v1/bpi/currentprice.json");	

	//Stream Observable, making plain object from the promise of Response
	var responseStream = requestStream.flatMap(function(requestUrl){
		return Rx.Observable.fromPromise($.getJSON(requestUrl));
	});

	//this stream will be execute each minute, starting when the page is loaded
	var streamByMinute = Rx.Observable.interval(60000).startWith("startup");

	//subscription 
	streamByMinute.subscribe(function(interval){;
		actionResponse();
	});

	//Actions when getting the response
	function actionResponse(){
		//Subscription for responseStream, I wanna watch the objectBpi(Bitcoin price index) and do some stuff Here.
		responseStream.subscribe(function(objectBpi){
			var price = objectBpi.bpi.USD.rate;
			//store the attr rate			
			bpiList.push(price);
			//Show in View
			updateContent(currentPriceEl, price + "$");			
			//When the list have five Prices, then we can calculate the Rolling average.
			if(bpiList.length >= 5){
				calculateRollingAverage();
			}else{				
				rollingAverageEl.textContent = "Remaining "+ (5- bpiList.length) +"ElementsTo calculate the Rolling average.";
			}						
		});
	}


	function calculateRollingAverage(){
		var itemsPrice = Rx.Observable.fromArray(bpiList);
		//Getting the prices from the observable list and store of Five on five.
		//Filter, returning when the array have a length of Five Elements
		//and take the last element(Array containing the last 5 Elements)
		//Parse each elements and Parse to Float
		//at the end Calculate Average
		var bufferItems = itemsPrice.bufferWithCount(5,1).
							filter(function(x, idx, obs){
								return x.length == 5;
							}).takeLast(1)
							.map(function(itemsPrice){
								console.log("from Map");
								console.log(itemsPrice);
								return parseFloat(itemsPrice);
							}).average();		

		bufferItems.subscribe(function(rollingAv){
			console.log(rollingAv);
			updateContent(rollingAverageEl, rollingAv + "$");			
		});
	}

	function updateContent(element, text){
		element.textContent = text;
	}

</script>